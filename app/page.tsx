"use client";

import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { useLanguage } from "@/context/LanguageContext";
import RecentSection from "@/app/components/RecentSection";
import FavoriteSection from "@/app/components/FavoriteSection";
import CompareSection from "@/app/components/CompareSection";
import { speakText, stopSpeech } from "@/lib/textToSpeech";
import sampleData from "@/lib/data/mgnregaSample.json";

export default function HomePage() {
  const { language } = useLanguage();
  const [selectedDistrict, setSelectedDistrict] = useState<string>("Nalbari");
  const [summary, setSummary] = useState<any | null>(null);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isCompareOpen, setIsCompareOpen] = useState(false);
  const [comparePair, setComparePair] = useState<{ a: string; b: string }>({ a: "Nalbari", b: "Patna" });

  // üß≠ Auto-location ‚Üí Reverse Geocode
  useEffect(() => {
    if (!("geolocation" in navigator)) return;
    navigator.geolocation.getCurrentPosition(
      async (pos) => {
        try {
          const res = await fetch(`/api/reverse-geocode?lat=${pos.coords.latitude}&lon=${pos.coords.longitude}`);
          const body = await res.json();
          if (body?.district) setSelectedDistrict(body.district);
        } catch {
          // fallback silently
        }
      },
      () => {},
      { maximumAge: 60 * 60 * 1000 }
    );
  }, []);

  // üìä Load district data
  useEffect(() => {
    if (!selectedDistrict) return;
    (async () => {
      try {
        const res = await fetch(`/api/district?name=${encodeURIComponent(selectedDistrict)}`);
        const json = await res.json();
        setSummary(json);
        // store in recent
        const recent = JSON.parse(localStorage.getItem("recentDistricts") || "[]");
        const updated = [json.name, ...recent.filter((r: string) => r !== json.name)].slice(0, 10);
        localStorage.setItem("recentDistricts", JSON.stringify(updated));
      } catch {
        const fallback = (sampleData as any[]).find((d) => d.name === selectedDistrict) || (sampleData as any[])[0];
        setSummary(fallback);
      }
    })();
  }, [selectedDistrict]);

  // ‚≠ê Favorites toggle
  const toggleFavorite = (name?: string) => {
    const district = name || (summary?.name ?? selectedDistrict);
    if (!district) return;
    const favorites = JSON.parse(localStorage.getItem("favorites") || "[]");
    const updated = favorites.includes(district)
      ? favorites.filter((f: string) => f !== district)
      : [district, ...favorites].slice(0, 20);
    localStorage.setItem("favorites", JSON.stringify(updated));
    window.dispatchEvent(new Event("storageUpdated"));
  };

  // üéß Voice summary
  const handleVoiceSummary = () => {
    if (!summary) return;
    if (isSpeaking) {
      stopSpeech();
      setIsSpeaking(false);
      return;
    }

    const { name, state, employmentRate, fundsAllocated, fundsUtilized, households, workers, persondaysGenerated, avgDaysPerHH, womenParticipation, scParticipation, stParticipation } = summary;

    const summaryText = {
      en: `In ${name} district of ${state}, during 2024, ${employmentRate}% of households gained employment under MGNREGA. ‚Çπ${fundsUtilized} crore out of ‚Çπ${fundsAllocated} crore were utilized, generating ${persondaysGenerated.toLocaleString()} person-days for ${workers.toLocaleString()} workers across ${households.toLocaleString()} households. Women participation was ${womenParticipation}%, Scheduled Castes ${scParticipation}%, and Scheduled Tribes ${stParticipation}%. The average number of days of work per household was ${avgDaysPerHH}.`,
      hi: `${state} ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ï‡•á ${name} ‡§ú‡§º‡§ø‡§≤‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§∞‡•ç‡§∑ 2024 ‡§Æ‡•á‡§Ç ‡§Æ‡§®‡§∞‡•á‡§ó‡§æ ‡§ï‡•á ‡§§‡§π‡§§ ${employmentRate}% ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞ ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§ï‡•Å‡§≤ ‚Çπ${fundsAllocated} ‡§ï‡§∞‡•ã‡§°‡§º ‡§Ü‡§µ‡§Ç‡§ü‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•á ‚Çπ${fundsUtilized} ‡§ï‡§∞‡•ã‡§°‡§º ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§π‡•Å‡§Ü‡•§ ${workers.toLocaleString()} ‡§Æ‡§ú‡§º‡§¶‡•Ç‡§∞‡•ã‡§Ç ‡§î‡§∞ ${households.toLocaleString()} ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Å‡§≤ ${persondaysGenerated.toLocaleString()} ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø-‡§¶‡§ø‡§µ‡§∏ ‡§ï‡§æ ‡§∏‡•É‡§ú‡§® ‡§π‡•Å‡§Ü‡•§ ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§≠‡§æ‡§ó‡•Ä‡§¶‡§æ‡§∞‡•Ä ${womenParticipation}% ‡§∞‡§π‡•Ä, ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ú‡§æ‡§§‡§ø ${scParticipation}%, ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ú‡§®‡§ú‡§æ‡§§‡§ø ${stParticipation}% ‡§∞‡§π‡•Ä‡•§ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§î‡§∏‡§§‡§® ${avgDaysPerHH} ‡§¶‡§ø‡§® ‡§ï‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Æ‡§ø‡§≤‡§æ‡•§`,
      as: `${state} ‡ß∞‡¶æ‡¶ú‡ßç‡¶Ø‡ß∞ ${name} ‡¶ú‡¶ø‡¶≤‡¶æ‡¶§, ‡ß®‡ß¶‡ß®‡ß™ ‡¶ö‡¶®‡¶§ ‡¶Æ‡ßã‡¶®‡ß∞‡ßá‡¶ó‡¶æ‡ß∞ ‡¶Ö‡¶ß‡ßÄ‡¶®‡¶§ ${employmentRate}% ‡¶™‡ß∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡ßá ‡¶ö‡¶æ‡¶ï‡ß∞‡¶ø ‡¶≤‡¶æ‡¶≠ ‡¶ï‡ß∞‡¶ø‡¶õ‡¶ø‡¶≤‡•§ ‡¶Æ‡ßÅ‡¶† ‚Çπ${fundsAllocated} ‡¶ï‡ßã‡¶ü‡¶ø‡ß∞ ‡¶≠‡¶ø‡¶§‡ß∞‡¶§ ‚Çπ${fundsUtilized} ‡¶ï‡ßã‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡ß±‡¶π‡¶æ‡ß∞ ‡¶ï‡ß∞‡¶æ ‡¶π‡ßà‡¶õ‡¶ø‡¶≤‡•§ ${workers.toLocaleString()} ‡¶ï‡ß∞‡ßç‡¶Æ‡ßÄ ‡¶Ü‡ß∞‡ßÅ ${households.toLocaleString()} ‡¶™‡ß∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá ${persondaysGenerated.toLocaleString()} ‡¶ú‡¶®-‡¶¶‡¶ø‡¶® ‡¶∏‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø ‡¶π‡ßà‡¶õ‡¶ø‡¶≤‡•§ ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡ß∞‡¶π‡¶£ ‡¶Ü‡¶õ‡¶ø‡¶≤ ${womenParticipation}%, ‡¶Ö‡¶®‡ßÅ.‡¶ú‡¶æ‡¶§‡¶ø ${scParticipation}% ‡¶Ü‡ß∞‡ßÅ ‡¶Ö‡¶®‡ßÅ.‡¶ú‡¶®‡¶ú‡¶æ‡¶§‡¶ø ${stParticipation}%‡•§ ‡¶ó‡¶°‡¶º‡ßá ‡¶™‡ßç‡ß∞‡¶§‡¶ø‡¶ü‡ßã ‡¶™‡ß∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡ßá ${avgDaysPerHH} ‡¶¶‡¶ø‡¶® ‡¶ï‡¶æ‡¶Æ ‡¶™‡¶æ‡¶≤‡ßá‡•§`,
    };

    speakText(summaryText[language as "en" | "hi" | "as"], language as any, () => setIsSpeaking(true), () => setIsSpeaking(false));
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#FF9933]/10 via-white to-[#138808]/10 text-black p-6">
      {/* üåÖ Hero Section */}
      <section className="text-center py-10">
        <motion.h1 initial={{ y: -10, opacity: 0 }} animate={{ y: 0, opacity: 1 }} className="text-4xl font-heading font-semibold">
          Mitra ‚Äî Our Voice, Our Right
        </motion.h1>
        <p className="mt-2 text-gray-800">
          {language === "hi"
            ? "‡§°‡•á‡§ü‡§æ ‡§î‡§∞ ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•á ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•ã ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§®‡§æ"
            : language === "as"
            ? "‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡ß∞‡ßÅ ‡¶ï‡¶£‡ßç‡¶†‡ß∞ ‡¶ú‡ß∞‡¶ø‡¶Ø‡¶º‡¶§‡ßá ‡¶≠‡¶æ‡ß∞‡¶§‡¶ï ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶ï‡ß∞‡¶æ"
            : "Empowering Bharat through Data and Voice"}
        </p>
      </section>

      {/* üèûÔ∏è Main Grid */}
      <section className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Left Panel */}
        <div className="bg-white/70 backdrop-blur-md p-6 rounded-2xl shadow">
          <label className="block text-sm font-medium mb-2">Select District</label>
          <select
            value={selectedDistrict}
            onChange={(e) => setSelectedDistrict(e.target.value)}
            className="w-full rounded-md p-2 border text-black"
          >
            {(sampleData as any[]).map((d) => (
              <option key={d.name} value={d.name}>
                {d.name} ({d.state})
              </option>
            ))}
          </select>

          <div className="mt-4 flex gap-2 flex-wrap">
            <button onClick={() => toggleFavorite()} className="px-3 py-1 bg-[#FFD60A]/80 rounded">
              ‚òÖ Favorite
            </button>
            <button
              onClick={() => {
                setIsCompareOpen(true);
                setComparePair({ a: selectedDistrict, b: comparePair.b || "Patna" });
              }}
              className="px-3 py-1 bg-[#FF9933]/80 rounded"
            >
              Compare
            </button>
          </div>

          <RecentSection onSelect={(d) => setSelectedDistrict(d)} />
          <FavoriteSection onSelect={(d) => setSelectedDistrict(d)} />
        </div>

        {/* Right Panel - Summary */}
        <div className="bg-white/80 p-6 rounded-2xl shadow text-black">
          {summary ? (
            <>
              <h3 className="text-xl font-semibold mb-2">
                {summary.name}, {summary.state} ‚Äî Summary (2024)
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mt-3">
                <div className="p-3 rounded bg-[#FF9933]/10">
                  <div className="text-sm">Employment Rate</div>
                  <div className="text-2xl font-bold">{summary.employmentRate}%</div>
                </div>
                <div className="p-3 rounded bg-[#FFD60A]/10">
                  <div className="text-sm">Funds Utilized / Allocated</div>
                  <div className="text-lg font-semibold">
                    ‚Çπ{summary.fundsUtilized} / ‚Çπ{summary.fundsAllocated} Cr
                  </div>
                </div>
                <div className="p-3 rounded bg-[#138808]/10">
                  <div className="text-sm">Households Engaged</div>
                  <div className="text-2xl font-bold">{summary.households.toLocaleString()}</div>
                </div>
                <div className="p-3 rounded bg-[#00B4D8]/10">
                  <div className="text-sm">Workers</div>
                  <div className="text-2xl font-bold">{summary.workers.toLocaleString()}</div>
                </div>
                <div className="p-3 rounded bg-[#E74C3C]/10">
                  <div className="text-sm">Persondays Generated</div>
                  <div className="text-xl font-bold">{summary.persondaysGenerated.toLocaleString()}</div>
                </div>
                <div className="p-3 rounded bg-[#F39C12]/10">
                  <div className="text-sm">Avg Days / HH</div>
                  <div className="text-2xl font-bold">{summary.avgDaysPerHH}</div>
                </div>
                <div className="p-3 rounded bg-[#2ECC71]/10">
                  <div className="text-sm">Women Participation</div>
                  <div className="text-xl font-semibold">{summary.womenParticipation}%</div>
                </div>
                <div className="p-3 rounded bg-[#FFD60A]/10">
                  <div className="text-sm">SC Participation</div>
                  <div className="text-xl font-semibold">{summary.scParticipation}%</div>
                </div>
                <div className="p-3 rounded bg-[#00B4D8]/10">
                  <div className="text-sm">ST Participation</div>
                  <div className="text-xl font-semibold">{summary.stParticipation}%</div>
                </div>
              </div>

              <div className="mt-5">
                <button
                  onClick={handleVoiceSummary}
                  className="px-4 py-2 rounded-full bg-gradient-to-r from-[#FF9933] via-[#FFD60A] to-[#138808] text-black mr-3"
                >
                  {isSpeaking ? "‚è∏ Pause Voice" : "üéß Listen Summary"}
                </button>

                <button
                  onClick={() => {
                    navigator.clipboard?.writeText(JSON.stringify(summary, null, 2));
                  }}
                  className="px-3 py-2 border rounded"
                >
                  Copy JSON
                </button>
              </div>
            </>
          ) : (
            <p>Loading...</p>
          )}
        </div>
      </section>

      {/* ‚öñÔ∏è Compare Modal */}
      <CompareSection
        open={isCompareOpen}
        onClose={() => setIsCompareOpen(false)}
        districtA={comparePair.a}
        districtB={comparePair.b}
        lang={language as "en" | "hi" | "as"}
      />
    </div>
  );
}
